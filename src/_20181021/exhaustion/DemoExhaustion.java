package _20181021.exhaustion;

import java.util.Scanner;

/**
 * 暴力枚举之 -- 火柴棍与等式不得不说的故事
 *
 * 题目描述 ：假设小哼手上有 m 根（m <= 24）火柴棍，那么小哼究竟可以拼出哪些形如 A + B = C 的等式呢？
 * （备注 ：拼出每个数字所需要消耗的火柴棍个数分别为。。参见电子显示钟）
 *
 * 基本思路 ：
 *      1、就相当于把各个数值和拼出这个数所需的火柴棍数量一一映射起来了嘛
 *      2、所以说我们只需要知道一个数由哪些数字组成，然后转化为对应的火柴棍数，加起来，就能得到这个数所需的火柴棍数量啦
 *      3、那就写一个方法，接收一个数，将它每一位上的数字求出来，再转化为火柴棍数，最后加起来返回这个值就好啦
 *      3、就比如说对于一个数 123，我们知道它由数字 1、2、3 组成，那么拼出它所需的火柴棍数量就为 2 + 5 + 5
 *      4、然后我们只需要再稍微暴力地枚举一下看看一共有哪些可能的等式，问题就完美解决啦
 *
 * 注意事项 ：
 *      我们知道拼出数字 1 需要用到的火柴棍是最少的（两根），+ 和 = 各需要两根火柴
 *      所以我们最多有 24 根火柴的话，就最多能拼 10 个 1（因为 + 和 = 会用掉四根，就只剩 20 根了）
 *      然后 A + B = C 可以简化为 X = Y 嘛，那就最多一边 5 个 1，均摊一下就变成了 11111 = 11111
 *      所以 A、B、C 最大均不超过 11111 --> 也就是说我们从 0 穷举到 11111 就可以啦
 *
 * 输出示例：
 *      请输入可用的火柴棍数（不超过24根）：
 *      18
 *      由18根火柴能拼出的等式如下 ：
 *      0 + 4 = 4
 *      0 + 11 = 11
 *      1 + 10 = 11
 *      2 + 2 = 4
 *      2 + 7 = 9
 *      4 + 0 = 4
 *      7 + 2 = 9
 *      10 + 1 = 11
 *      11 + 0 = 11
 *
 */

public class DemoExhaustion {
    private static final int MAX_OF_NUM = 11111;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("请输入可用的火柴棍数（不超过24根）：");
        int sum = scanner.nextInt();

        System.out.println("由" + sum + "根火柴能拼出的等式如下 ：");
        // 分别枚举出 A、B、C 的可能值（C 由 A、B 计算得出，减少不必要的循环）
        for(int a = 0; a < MAX_OF_NUM; a++) {
            for(int b = 0; b < MAX_OF_NUM; b++) {
                int c = a +b;

                // 若拼出 A、B、C 所需的火柴棍总数为 sum-4（去掉了 + 和 =）
                if(fun(a) + fun(b) + fun(c) == (sum - 4) ) {
                    // 就符合条件啦！输出这个等式叭！
                    System.out.println(a + " + " + b +  " = " + c);
                }
            }
        }
    }

    /**
     * 将传入的 数转化为对应的火柴棍总数
     * @param num 传入所需转化的数
     * @return 返回拼出这个数所需的火柴棍总数
     */
    private static int fun(int num) {
        // 建立 0 - 9 中每个数字和火柴棍之间的映射关系
        int[] mapping = {6, 2, 5, 5, 4, 5, 6, 3, 7, 6};
        // 记录所需的火柴棍总数
        int total = 0;

        do {
            // 分离出 num 每一位的数字，直接转化为对应的火柴棍数，并加到总数上去
            total += mapping[(num%10)];

        // while 写起来有点麻烦，这里就直接用 do-while 先斩后奏好了
        } while ((num = num / 10) != 0);

        return total;
    }
}
